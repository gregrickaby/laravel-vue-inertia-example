<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\DB;

class Product extends Model
{
    use HasFactory;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'description',
        'image',
        'name',
        'price',
        'quantity',
        'sku',
    ];

    /**
     * The attributes that should be appended to the model's array form.
     *
     * @var array<int, string>
     */
    protected $appends = ['lifetime_sales', 'lifetime_revenue'];

    /**
     * Define the relationship with Order.
     */
    public function orders(): BelongsToMany
    {
        return $this->belongsToMany(Order::class, 'order_items');
    }

    /**
     * Define the relationship with OrderItem.
     */
    public function orderItems(): HasMany
    {
        return $this->hasMany(OrderItem::class);
    }

    /**
     * Adjust the inventory count when a product is sold.
     *
     * @param  int  $quantitySold  The quantity of product sold
     */
    public function adjustInventoryOnSale(int $quantitySold): void
    {
        if ($this->quantity - $quantitySold < 0) {
            throw new \Exception("Insufficient stock for product {$this->name}");
        }

        $this->quantity -= $quantitySold;
        $this->save();
    }

    /**
     * Accessor for total lifetime sales of a product.
     */
    public function getLifetimeSalesAttribute(): int
    {
        $cacheKey = "product_{$this->id}_lifetime_sales";

        return Cache::remember($cacheKey, now()->addHours(24), function () {
            return $this->orderItems()->sum('quantity');
        });
    }

    /**
     * Get the total lifetime revenue generated by the product.
     */
    public function getLifetimeRevenueAttribute(): float
    {
        $cacheKey = "product_{$this->id}_lifetime_revenue";

        return Cache::remember($cacheKey, now()->addHours(24), function () {
            return $this->orderItems()
                ->join('products', 'order_items.product_id', '=', 'products.id')
                ->sum(DB::raw('order_items.quantity * products.price'));
        });
    }

    /**
     * Calculate total sales of the product in a specific period.
     *
     * @param  int  $days  Number of days for the sales period
     */
    public function totalSalesInPeriod(int $days = 7): int
    {
        $cacheKey = "product_{$this->id}_total_sales_in_period_{$days}_days";

        return Cache::remember($cacheKey, now()->addHours(24), function () use ($days) {
            return $this->orderItems()
                ->join('orders', 'order_items.order_id', '=', 'orders.id')
                ->where('orders.created_at', '>=', Carbon::now()->subDays($days))
                ->sum('order_items.quantity');
        });
    }

    /**
     * Scope a query to get top selling products in the last specified number of days.
     *
     * @param  Builder  $query
     */
    public function scopeBestSellingProducts($query, int $days = 7, int $limit = 3): Builder
    {

        return $query->join('order_items', 'products.id', '=', 'order_items.product_id')
            ->where('order_items.created_at', '>=', Carbon::now()->subDays($days))
            ->groupBy('products.id')
            ->selectRaw('products.*, sum(order_items.quantity) as total_quantity_sold')
            ->orderByDesc('total_quantity_sold')
            ->limit($limit);
    }
}
